import numpy as np

def freeman_chain_code(contour):
    """
    Generate 8-connected Freeman chain code
    contour: list of (x, y) coordinates
    """
    chain = []
    
    # Definisi arah (dx, dy)
    directions = {
        (1, 0): 0,    # kanan
        (1, -1): 1,   # kanan atas
        (0, -1): 2,   # atas
        (-1, -1): 3,  # kiri atas
        (-1, 0): 4,   # kiri
        (-1, 1): 5,   # kiri bawah
        (0, 1): 6,    # bawah
        (1, 1): 7     # kanan bawah
    }
    
    for i in range(len(contour) - 1):
        dx = contour[i+1][0] - contour[i][0]
        dy = contour[i+1][1] - contour[i][1]
        
        # Normalisasi untuk 8-connectivity
        if abs(dx) > 1:
            dx = dx // abs(dx)
        if abs(dy) > 1:
            dy = dy // abs(dy)
        
        if (dx, dy) in directions:
            chain.append(directions[(dx, dy)])
    
    return chain

def reconstruct_from_chain(start_point, chain_code):
    """
    Rekonstruksi kontur dari chain code
    """
    # Pergerakan untuk setiap kode
    moves = [
        (1, 0),   # 0: kanan
        (1, -1),  # 1: kanan atas
        (0, -1),  # 2: atas
        (-1, -1), # 3: kiri atas
        (-1, 0),  # 4: kiri
        (-1, 1),  # 5: kiri bawah
        (0, 1),   # 6: bawah
        (1, 1)    # 7: kanan bawah
    ]
    
    contour = [start_point]
    current = list(start_point)
    
    for code in chain_code:
        dx, dy = moves[code]
        current = [current[0] + dx, current[1] + dy]
        contour.append(tuple(current))
    
    return contour

# Contoh penggunaan
contour = [(0, 1), (0, 2), (0, 3), (1, 3), 
           (2, 3), (3, 2), (3, 1), (2, 0), (1, 0)]

chain = freeman_chain_code(contour)
print(f"Kontur: {contour}")
print(f"Chain Code: {chain}")

# Rekonstruksi
reconstructed = reconstruct_from_chain(contour[0], chain)
print(f"Rekonstruksi: {reconstructed}")