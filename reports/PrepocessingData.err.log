Traceback (most recent call last):
  File "C:\Users\achma\AppData\Roaming\Python\Python310\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\laragon\bin\python\python-3.10\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\laragon\bin\python\python-3.10\lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\achma\AppData\Roaming\Python\Python310\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "C:\laragon\bin\python\python-3.10\lib\asyncio\base_events.py", line 646, in run_until_complete
    return future.result()
  File "C:\laragon\bin\python\python-3.10\lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\laragon\bin\python\python-3.10\lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\laragon\bin\python\python-3.10\lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Train-Test Split dan Persiapan Dataset untuk Modeling dengan PyCaret
print("=== TRAIN-TEST SPLIT DAN PERSIAPAN FINAL DENGAN PYCARET ===")

if df_final is not None:
    
    # Check apakah sudah ada split dari PyCaret atau perlu manual split
    if df_test_final is not None:
        # PyCaret sudah melakukan split
        print(f"Menggunakan PyCaret train-test split:")
        print(f"   â€¢ PyCaret telah melakukan stratified split otomatis")
        print(f"   â€¢ Train set: {df_final.shape[0]} samples")
        print(f"   â€¢ Test set: {df_test_final.shape[0]} samples")
        
        # Extract features dan target dari PyCaret results
        target_col = 'species'
        feature_cols = [col for col in df_final.columns if col != target_col]
        
        X_train = df_final[feature_cols].copy()
        y_train = df_final[target_col].copy()
        X_test = df_test_final[feature_cols].copy()
        y_test = df_test_final[target_col].copy()
        
        all_features = feature_cols
        
        print(f"   â€¢ Features dari PyCaret: {len(all_features)}")
        
    else:
        # Manual split untuk non-PyCaret case
        print(f"Melakukan manual train-test split:")
        
        # Persiapan features dan target
        X = df_final[all_features].copy()
        y = df_final['species'].copy()
        
        print(f"Dataset Preparation:")
        print(f"   â€¢ Total samples: {len(df_final)}")
        print(f"   â€¢ Features: {len(all_features)}")
        print(f"   â€¢ Target classes: {y.nunique()} (setosa=0, versicolor=1, virginica=2)")
        
        # Train-test split dengan stratified sampling
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, 
            test_size=0.2, 
            random_state=42, 
            stratify=y
        )
        
        print(f"   â€¢ Train set: {len(X_train)} samples")
        print(f"   â€¢ Test set: {len(X_test)} samples")
    
    # Cek distribusi kelas
    print(f"\nDistribusi Kelas:")
    species_names = {0: 'setosa', 1: 'versicolor', 2: 'virginica'}
    
    # Train distribution
    train_dist = y_train.value_counts().sort_index()
    test_dist = y_test.value_counts().sort_index()
    
    print(f"{'Class':<12} {'Train Count':<12} {'Train %':<10} {'Test Count':<11} {'Test %':<8}")
    print("-" * 65)
    
    for class_idx in [0, 1, 2]:
        train_count = train_dist.get(class_idx, 0)
        test_count = test_dist.get(class_idx, 0)
        train_pct = (train_count / len(y_train)) * 100 if len(y_train) > 0 else 0
        test_pct = (test_count / len(y_test)) * 100 if len(y_test) > 0 else 0
        
        print(f"{species_names[class_idx]:<12} {train_count:<12} {train_pct:<9.1f}% {test_count:<11} {test_pct:<7.1f}%")
    
    # Informasi preprocessing untuk reproduksi
    preprocessing_method = 'pycaret' if df_test_final is not None else 'manual'
    
    preprocessing_info = {
        'outlier_treatment': 'consensus_based_removal',
        'scaling_method': preprocessing_method,
        'original_features': features,
        'processed_features': all_features,
        'total_features': len(all_features),
        'scaler': final_scaler,
        'train_size': len(X_train),
        'test_size': len(X_test),
        'random_state': 42,
        'preprocessing_pipeline': preprocessing_method
    }
    
    print(f"\nPreprocessing Information:")
    print(f"   â€¢ Outlier treatment: {preprocessing_info['outlier_treatment']}")
    print(f"   â€¢ Scaling method: {preprocessing_info['scaling_method']}")
    print(f"   â€¢ Total features: {preprocessing_info['total_features']}")
    print(f"   â€¢ Random state: {preprocessing_info['random_state']}")
    
    # Tampilkan sample dari dataset final
    print(f"\nSample Data Final (Train Set - First 5 rows):")
    if preprocessing_method == 'pycaret':
        # Show beberapa features penting dari PyCaret
        sample_features = list(X_train.columns)[:4]  # First 4 features dari PyCaret
    else:
        # Show original + engineered features
        sample_features = ['sepal length (cm)', 'petal length (cm)', 'petal_area', 'total_area']
    
    print(X_train[sample_features].head())
    
    print(f"\nTarget Labels (Train Set - First 10):")
    print(y_train.head(10).tolist())
    
    # PyCaret Data Preparation untuk modeling
    print(f"\nPERSIAPAN UNTUK PYCARET MODELING:")
    
    if preprocessing_method == 'pycaret':
        # Data sudah diproses oleh PyCaret
        df_pycaret = df_final.copy()
        df_pycaret_test = df_test_final.copy()
        
        print(f"   â€¢ Data telah diproses oleh PyCaret preprocessing pipeline")
        print(f"   â€¢ df_pycaret: {df_pycaret.shape} (training data)")
        print(f"   â€¢ df_pycaret_test: {df_pycaret_test.shape} (test data)")
        print(f"   â€¢ Target column: 'species'")
        print(f"   â€¢ Siap langsung untuk modeling")
        
    else:
        # Gabungkan X dan y untuk PyCaret
        df_pycaret = X_train.copy()
        df_pycaret['species'] = y_train
        
        # Siapkan test set terpisah untuk evaluasi final
        df_pycaret_test = X_test.copy()
        df_pycaret_test['species'] = y_test
        
        print(f"   â€¢ df_pycaret: {df_pycaret.shape} (untuk training & validation)")
        print(f"   â€¢ df_pycaret_test: {df_pycaret_test.shape} (untuk final evaluation)")
        print(f"   â€¢ Target column: 'species'")
        print(f"   â€¢ Feature columns: {len(all_features)} features")
    
    # Summary informasi untuk modeling
    print(f"\nSUMMARY PREPROCESSING:")
    print(f"   â€¢ Objective: Multi-class classification (3 classes)")
    print(f"   â€¢ Data quality: High (outliers handled dengan PyCaret)")
    print(f"   â€¢ Preprocessing: {preprocessing_method.upper()} pipeline")
    print(f"   â€¢ Features: {len(all_features)} total features")
    print(f"   â€¢ Class balance: Good (stratified split maintained)")
    print(f"   â€¢ Ready for: PyCaret automated ML pipeline")
    
    print(f"\nPREPROCESSING DENGAN PYCARET COMPLETED!")
    print(f"Dataset siap untuk modeling dengan PyCaret")
    
else:
    print("Tidak dapat melakukan train-test split karena dataset final tidak tersedia")
    X_train = X_test = y_train = y_test = None
    df_pycaret = df_pycaret_test = None
    preprocessing_info = None
------------------

----- stdout -----
=== TRAIN-TEST SPLIT DAN PERSIAPAN FINAL DENGAN PYCARET ===
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mNameError[0m                                 Traceback (most recent call last)
Cell [1;32mIn[7], line 7[0m
[0;32m      2[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124m=== TRAIN-TEST SPLIT DAN PERSIAPAN FINAL DENGAN PYCARET ===[39m[38;5;124m"[39m)
[0;32m      4[0m [38;5;28;01mif[39;00m df_final [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m      5[0m     
[0;32m      6[0m     [38;5;66;03m# Check apakah sudah ada split dari PyCaret atau perlu manual split[39;00m
[1;32m----> 7[0m     [38;5;28;01mif[39;00m [43mdf_test_final[49m [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m      8[0m         [38;5;66;03m# PyCaret sudah melakukan split[39;00m
[0;32m      9[0m         [38;5;28mprint[39m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mMenggunakan PyCaret train-test split:[39m[38;5;124m"[39m)
[0;32m     10[0m         [38;5;28mprint[39m([38;5;124mf[39m[38;5;124m"[39m[38;5;124m   â€¢ PyCaret telah melakukan stratified split otomatis[39m[38;5;124m"[39m)

[1;31mNameError[0m: name 'df_test_final' is not defined

